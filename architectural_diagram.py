# -*- coding: utf-8 -*-
"""Architectural Diagram.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dzoLRx0WEtUxRsydbmh3gmfyipKBEz0j

# **Data Architectural Diagram**
"""

!pip install diagrams
!apt-get install -y graphviz

from google.colab import files
uploaded = files.upload()

from diagrams import Diagram, Cluster, Edge
from diagrams.onprem.client import Users
from diagrams.onprem.workflow import Airflow
from diagrams.aws.storage import S3
from diagrams.aws.database import RDS
from diagrams.programming.framework import Fastapi
from diagrams.generic.compute import Rack as SwaggerUI
from diagrams.generic.compute import Rack as JWTAuth
from diagrams.custom import Custom

# Path to your custom icons (uploaded to the environment)
streamlit_icon_path = "/content/streamlit.png"
openai_icon_path = "/content/openai.png"
nvidia_icon_path = "/content/Nvidia.png"
snowflake_icon_path = "/content/Snowflake.png"
selenium_icon_path = "/content/Selenium.png"  # Path for Selenium icon

# Diagram structure
with Diagram("Data Architecture", show=True, direction="TB"):

    with Cluster("Data Extraction and Database Loading"):
        s3_processed = S3("AWS S3 Bucket")
        cfa_publication = S3("CFA Publication Files")  # Only one S3 bucket
        selenium = Custom("Selenium", selenium_icon_path)  # Add Selenium service
        airflow = Airflow("Airflow")
        snowflake = Custom("Snowflake Database", snowflake_icon_path)  # Add Snowflake service

        # Updated connection flow with only one S3 bucket
        cfa_publication >>  airflow
        cfa_publication >> selenium   # Connect the components
        airflow >> s3_processed >> snowflake  # Connect Airflow to Snowflake

    with Cluster("Docker Container"):
        rds_db = RDS("AWS RDS Database")
        fastapi = Fastapi("FastAPI")
        openai_api = Custom("OpenAI API", openai_icon_path)
        swagger_ui = SwaggerUI("Swagger UI")
        jwt_auth = JWTAuth("JWT Auth")
        nvidia_service = Custom("NVIDIA Service", nvidia_icon_path)  # Add NVIDIA service

        # Cluster for Streamlit functionalities
        with Cluster("Streamlit Application"):
            login_signup = Custom("Login/Sign-up", streamlit_icon_path)
            pdf_selection = Custom("PDF Selection", streamlit_icon_path)
            summarization = Custom("Summarization", streamlit_icon_path)
            streamlit_ui = Custom("Streamlit UI", streamlit_icon_path)

        user = Users("User")

        # Relations within clusters
        snowflake >> fastapi
        rds_db >> fastapi
        fastapi >> openai_api
        fastapi >> nvidia_service  # Connect FastAPI to NVIDIA service
        swagger_ui >> fastapi
        jwt_auth >> fastapi
        fastapi >> streamlit_ui >> user
        fastapi >> rds_db
        user >> openai_api
        openai_api >> streamlit_ui
        user >> streamlit_ui

        # Streamlit functionalities connections
        user >> login_signup >> streamlit_ui
        pdf_selection >> streamlit_ui
        summarization >> streamlit_ui

from IPython.display import Image
Image("data_architecture.png")

